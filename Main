from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters
from datetime import datetime, time
import pytz
import logging

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO

)
logger = logging.getLogger(__name__)

TOKEN = '7189713545:AAFsi97e9c6-dkLApUXJbeJOMO-Z7TSjXIk'
COS_CHAT_ID = '-1002026224982_1'
OWNER_CHAT_ID = '-1002373903712_1'

# Dictionaries to keep track of users' statuses, names, and teams
user_status = {}
user_names = {}
user_teams = {}
name_setting = {}

# Booking in/out tracking
booking_info = {
    "booking_in": [],
    "booking_out_midday": [],
    "booking_out_lp": []
}

TEAM_OPTIONS = ['Coy HQ', 'Team 1', 'Team 2', 'Team 3', 'Team 4']

# Set Singapore timezone
SGT = pytz.timezone('Asia/Singapore')

def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("Book In", callback_data='book_in')],
        [InlineKeyboardButton("Book Out", callback_data='book_out')],
        [InlineKeyboardButton("Show In-Camp Personnel", callback_data='show_incamp')],
        [InlineKeyboardButton("Booking In/Booking Out", callback_data='booking')],
        [InlineKeyboardButton("Settings", callback_data='settings')]
    ]
    return InlineKeyboardMarkup(keyboard)

def settings_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("Name", callback_data='set_name')],
        [InlineKeyboardButton("Team", callback_data='set_team')],
    ]
    return InlineKeyboardMarkup(keyboard)

def booking_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("Booking In, Please State by 1800H", callback_data='booking_in')],
        [InlineKeyboardButton("Booking Out Midday", callback_data='booking_out_midday')],
        [InlineKeyboardButton("Booking Out (LP)", callback_data='booking_out_lp')],
        [InlineKeyboardButton("Remove Name", callback_data='remove_name')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: CallbackContext) -> None:
    if update.message.chat.type == 'private':
        user = update.message.from_user
        if user.id in user_names and user.id in user_teams:
            await update.message.reply_text('Hello! What would you like to do?', reply_markup=main_menu_keyboard())
        else:
            await update.message.reply_text('Set your Name and Team:', reply_markup=settings_menu_keyboard())

async def settings(update: Update, context: CallbackContext) -> None:
    await update.callback_query.message.reply_text('Set your Name and Team:', reply_markup=settings_menu_keyboard())
    await update.callback_query.answer()

async def setname_prompt(update: Update, context: CallbackContext) -> None:
    user = update.callback_query.from_user
    name_setting[user.id] = True
    await update.callback_query.message.reply_text('Update your name:')
    await update.callback_query.answer()

async def setname(update: Update, context: CallbackContext, user) -> None:
    #user = update.message.from_user
    if user.id in name_setting and name_setting[user.id]:
        name = update.message.text
        if name:
            user_names[user.id] = name
            await update.message.reply_text(f'Your name has been set to {name}.')
            if user.id in user_teams:
                await update.message.reply_text('Hello! What would you like to do?', reply_markup=main_menu_keyboard())
            else:
                keyboard = [
                    [InlineKeyboardButton(team, callback_data=team) for team in TEAM_OPTIONS]
                ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text('Please choose your team:', reply_markup=reply_markup)

        else:
            await update.message.reply_text('Please provide a name.')
        name_setting[user.id] = False

async def setteam_prompt(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton(team, callback_data=team) for team in TEAM_OPTIONS]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text('Please choose your team:', reply_markup=reply_markup)
    await update.callback_query.answer()

async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = query.from_user

    if query.data == 'set_name':
        await setname_prompt(update, context)
    elif query.data in TEAM_OPTIONS:
        user_teams[user.id] = query.data
        await query.edit_message_text(text=f'Your team has been set to {query.data}.')
        if user.id in user_names:
            await query.message.reply_text('Hello! What would you like to do?', reply_markup=main_menu_keyboard())
        await query.answer()
    elif query.data == 'set_team':
        await setteam_prompt(update, context)
    elif query.data == 'book_in':
        await bookin(update, context)
    elif query.data == 'book_out':
        await bookout(update, context)
    elif query.data == 'show_incamp':
        await incamp(update, context)
    elif query.data == 'booking':
        await query.message.reply_text('Select an option:', reply_markup=booking_menu_keyboard())
    elif query.data in ['booking_in', 'booking_out_midday', 'booking_out_lp', 'remove_name']:
        await handle_booking(update, context, query.data)
    elif query.data == 'settings':
        await settings(update, context)

async def handle_booking(update: Update, context: CallbackContext, action: str) -> None:
    user = update.callback_query.from_user
    name = user_names.get(user.id, user.full_name)
    team = user_teams.get(user.id, 'No team assigned')
    display_name = f"{name} ({team})"

    if action == 'remove_name':
        already_removed = True
        for key in booking_info.keys():
            if display_name in booking_info[key]:
                booking_info[key].remove(display_name)
                already_removed = False
        if already_removed:
            await update.callback_query.message.reply_text('You have already removed your name.')
            await update.callback_query.answer()
            return
        message = "Your name has been removed."
    else:
        if display_name in booking_info[action]:
            await update.callback_query.message.reply_text('You have already indicated your option.')
            await update.callback_query.answer()
            return

        booking_info[action].append(display_name)
        message = "Your booking status has been updated."

    # Update the group message
    booking_message = "Booking In, Please State by 1800H:\n"
    booking_message += "\n".join(booking_info["booking_in"]) + "\n\n"
    booking_message += "Booking Out Midday:\n"
    booking_message += "\n".join(booking_info["booking_out_midday"]) + "\n\n"
    booking_message += "Booking Out (LP):\n"
    booking_message += "\n".join(booking_info["booking_out_lp"]) + "\n\n"

    await context.bot.send_message(chat_id=COS_CHAT_ID, text=booking_message, reply_to_message_id="19602")
    await update.callback_query.message.reply_text(message)
    await update.callback_query.answer()

async def bookin(update: Update, context: CallbackContext) -> None:
    user = update.callback_query.from_user if hasattr(update, 'callback_query') else update.message.from_user
    if user.id not in user_names or user.id not in user_teams:
        await update.callback_query.message.reply_text('You must set your name and team before booking in. Use /start to set them.')
        return

    if user.id in user_status and user_status[user.id] == 'in':
        await update.callback_query.message.reply_text('You are already booked in.')
        return

    current_time = datetime.now(SGT).strftime('%d/%m/%y %H%MH')
    user_status[user.id] = 'in'
    name = user_names.get(user.id, user.full_name)
    team = user_teams.get(user.id, 'No team assigned')
    message = f'{name} ({team}) has booked in at {current_time}.'
    await update.callback_query.message.reply_text('You have successfully booked in.')
    await context.bot.send_message(chat_id=COS_CHAT_ID, text=message, reply_to_message_id="19602")  # Send the message to the group

async def bookout(update: Update, context: CallbackContext) -> None:
    user = update.callback_query.from_user if hasattr(update, 'callback_query') else update.message.from_user
    current_time = datetime.now(SGT).strftime('%d/%m/%y %H%MH')
    if user.id in user_status and user_status[user.id] == 'in':
        user_status[user.id] = 'out'
        name = user_names.get(user.id, user.full_name)
        team = user_teams.get(user.id, 'No team assigned')
        message = f'{name} ({team}) has booked out at {current_time}.'
        await update.callback_query.message.reply_text('You have successfully booked out.')
        await context.bot.send_message(chat_id=COS_CHAT_ID, text=message, reply_to_message_id="19602")  # Send the message to the group
    else:
        await update.callback_query.message.reply_text('You are not booked in.')

async def incamp(update: Update, context: CallbackContext) -> None:
    in_camp_users = [user for user, status in user_status.items() if status == 'in']
    if in_camp_users:
        teams = {team: [] for team in TEAM_OPTIONS}
        for user_id in in_camp_users:
            chat = await context.bot.get_chat(user_id)
            name = user_names.get(user_id, chat.full_name)
            team = user_teams.get(user_id, 'No team assigned')
            if team in teams:
                teams[team].append(name)
            else:
                teams['No team assigned'].append(name)

        message = f'Personnel in camp at {datetime.now(SGT).strftime("%d/%m/%y %H%MH")}:\n'
        for team, members in teams.items():
            message += f'\n{team} ({len(members)}):\n' + '\n'.join(members) + '\n' if members else f'\n{team} (0):\n'
        message += f'\nTotal: {len(in_camp_users)}'
    else:
        message = 'No personnel currently in camp.'
    await update.callback_query.message.reply_text(message)

async def private_message_handler(update: Update, context: CallbackContext) -> None:
    if update.message.chat.type == 'private':
        # await update.message.reply_text(
        #     "Heya! I'm Alpha's COS Matters Bot - a bot that will help the company manage COS related matters as effectively as possible. Do /start to begin!"
        # )'
        user = update.message.from_user
        await setname(update,context,user)


async def clear_bookings_daily(context: CallbackContext) -> None:
    booking_info["booking_in"].clear()
    booking_info["booking_out_midday"].clear()
    booking_info["booking_out_lp"].clear()

    booking_message = "Booking In, Please State by 1800H:\n\n\nBooking Out Midday:\n\n\nBooking Out (LP):\n\n"
    await context.bot.send_message(chat_id=COS_CHAT_ID, text=booking_message, reply_to_message_id="19602")

async def test_hourly(context: CallbackContext  ) -> None:
    test_message = "Hi, I'm working"
    await context.bot.send_message(chat_id=OWNER_CHAT_ID, text=test_message, reply_to_message_id="2")


async def start_msg(context: CallbackContext) -> None:
    test_message = "Hi, I start work"
    await context.bot.send_message(chat_id=OWNER_CHAT_ID, text=test_message)

async def test_clear_bookings(update: Update, context: CallbackContext) -> None:
    await clear_bookings_daily(context)
    await test_hourly(context)

def main() -> None:
        application = Application.builder().token(TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("setname", setname))
        application.add_handler(CommandHandler("setteam", setteam_prompt))
        application.add_handler(CommandHandler("bookin", bookin))
        application.add_handler(CommandHandler("bookout", bookout))
        application.add_handler(CommandHandler("incamp", incamp))
        application.add_handler(CommandHandler("testclear", test_clear_bookings))
        application.add_handler(CallbackQueryHandler(button))
        application.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, private_message_handler))

        job_queue = application.job_queue
        job_queue.run_daily(clear_bookings_daily, time=time(0, 0, 0, tzinfo=SGT))

        job_queue.run_repeating(test_hourly , interval=1200 )
        job_queue.run_once(start_msg, 1)

        logger.info('Bot is starting...')

        application.run_polling()


while True:
    try:
        main()
    except:
        main()
